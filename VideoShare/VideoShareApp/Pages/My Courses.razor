@page "/MyCourses"
@page "/MyCourses/Join/{courseCode}"
@using VideoShareData.Helpers
@using VideoShareData.DTOs
@using VideoShareData.Enums
@using System.ComponentModel.DataAnnotations
@implements IDisposable
@inject AuthenticationStateProvider _authProvider
@inject IDbContextFactory<WebAppDbContext> _contextFactory
@inject ICourseService _courseService
@inject NavigationManager _navManager

<PageTitle>My Courses</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (loading)
        {
            <Loading/>
        }
        else if (currentUser is null)
        {
        <div class="alert-danger" style="align-self:center;margin-top:30px;">
            Error: Could not find current user
            </div>
        }
        else
        {
            <div style="display:flex; flex-direction:column;padding-top:15px;padding-right:5%;padding-left:5%;align-items:center;">
                
                <h2>Owned Courses</h2>
                @foreach (Course c in currentUser.Courses)
                {
                    <OwnedCourseTab course=@c styleProps=@(new StyleProperties() {Height="80px", Width="90%"}) />
                }
                <div @onclick=CreateCourseAsync style="height:80px;width:90%;border: 3px solid rgba(0, 0, 0, 0.5);border-radius:6px;overflow:hidden;display:flex;flex-direction:row;padding-top:10px; padding-bottom:10px;padding-left:20px; padding-right:20px;align-items:center;cursor:pointer;">
                    <span class="oi oi-plus" style="color:#037C00;font-size:30px;"></span> <h3 style="margin-left:20px;">Create New Course</h3>   
                </div>

                <div class="standardGreen" style="height:2px;width:100%;margin-top:30px;margin-bottom:30px;" />

                <div style="display:flex;flex-direction:row;width:100%;">
                    <div style="width:40%;display:flex;flex-direction:row;align-items:center;">
                        @*There would be something here if my imported libraries worked as expected*@
                    </div>
                    <h2 style="flex-shrink:0;">Joined Courses</h2>
                    <EditForm Model="@courseCodeModel" OnValidSubmit=TryAddCourseAsync Context="editContext" style="width:40%;padding-left:40px;">
                        <DataAnnotationsValidator/>
                        <div style="display:flex;flex-direction:row;align-items:center;">
                            <InputText @oninput="ClearError" @bind-Value="@courseCodeModel.enteredCode" placeholder="Enter Course Code" style="width:200px;text-transform:uppercase;"></InputText>
                            <button class="btn-primary" type="submit" style="flex-shrink:0;height:min-content;margin-left:10px;">Add</button>
                        </div>
                        <ValidationMessage For="() => courseCodeModel.enteredCode" style="width:fit-content;" />                       
                    </EditForm>
                </div>
                @if (String.IsNullOrEmpty(errorMessage) == false)
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }

                <div>
                    @foreach (UserxCourse c in currentUser.UserxCourses)
                    {
                        <div style="padding:20px;display:inline-block;vertical-align:top;">
                            <CourseCard courseID="@c.CourseId" userID=@currentUser.UserId style="width:325px;height:400px;flex-shrink:0;"></CourseCard>
                        </div>
                    }
                </div>

            </div>
        }
    </Authorized>
    <NotAuthorized>
        Please Log In <a href="/Login">Here.</a>.
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string courseCode { get; set; }

    protected User? currentUser;
    protected CourseCodeModel courseCodeModel = new CourseCodeModel();
    private bool loading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authProvider.GetAuthenticationStateAsync();
        int ID = ClaimsHelper.getUserID(authState);
        using var dbContext = await _contextFactory.CreateDbContextAsync();
        //This query selects the current User along with their owned courses and the userXcourse objects for their joined courses
        currentUser = await dbContext.Users.Where(u => u.UserId == ID)
            .Include(u => u.Courses) //Owned courses
            .Include(u => u.UserxCourses) //Joined courses
            .AsSplitQuery().FirstOrDefaultAsync();

        loading = false;
        StateHasChanged();
    }

    private void ClearError()
    {
        errorMessage = null;
        StateHasChanged();
    }

    private async Task CreateCourseAsync()
    {
        if  (currentUser is null)
        {
            return;   
        }
        var results = await _courseService.CreateCourseAsync(currentUser.UserId);
        if (results.TaskSuccessful)
        {
            //If task was successful, returnValue should not be null.
            currentUser.Courses.Add(results.ReturnValue);
        }
        else
        {
            errorMessage = "Error: " + results.TaskMessage + ".";
        }
        StateHasChanged();
    }

    private async Task TryAddCourseAsync()
    {
        if (currentUser is null)
        {
            return;
        }
        //Even though it displays as all caps, the input is still captured as lowercase characters
        var code = (courseCodeModel.enteredCode ?? "").ToUpper();
        var results = await _courseService.AddUserToCourseAsync(currentUser.UserId, code);
        if (results.TaskSuccessful)
        {
            //If task was successful, returnValue is not null
            _navManager.NavigateTo(_navManager.BaseUri + "/Courses/" + results.ReturnValue.CourseId);
        }
        else {
            errorMessage = "Error: " + results.TaskMessage + ".";
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        //Clear the entered code in case navigating away from the page "submits" the form
        //(Happened prior when working with offcanvases)
        courseCodeModel.enteredCode = null;
    }
}
