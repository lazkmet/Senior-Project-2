@page "/"
@using VideoShareData.Helpers
@inject IDbContextFactory<WebAppDbContext> _contextFactory
@inject AuthenticationStateProvider _authProvider
@inject NavigationManager _navManager

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (loading)
        {
            <Loading/>
        }
        else
        {
            if (currentUser is null)
            {
                <div class="alert-danger" style="align-self:center;margin-top:30px;">
                    Error: Could not find current user
                </div>
            }
            else
            {
                <div style="display:flex; flex-direction:column;padding-top:15px;padding-right:5%;padding-left:5%;">
                    @if (currentUser.UserxVideos.Count() > 0)
                    {
                        <h2>Continue Watching</h2>
                        <VideoTab VideoID=@(currentUser.UserxVideos.First().VideoId) style="height:100px;width:85%;" includeCourseTitle=true onClick=@NavigateToVideo>
                            <button class="btn-primary" style="margin-left:auto;margin-right:10px;height:40px;min-width:115px;" @onclick=@(x => _navManager.NavigateTo("/Courses/" + currentUser.UserxVideos.First().Video.CourseId)) @onclick:stopPropagation="true">View Course</button>
                        </VideoTab>
                        <div class="standardGreen" style="height:2px;margin-top:30px;margin-bottom:30px;" />
                    }
                    @if (currentUser.Courses.Count() > 0)
                    {
                        <h2>Recent Courses</h2>
                        <div style="display:flex;flex-direction:row;flex-wrap:wrap;">
                            <div style="flex-grow:1;"/>
                            @foreach (Course c in currentUser.Courses)
                            {
                                <CourseCard course=@c style="width:325px;height:400px;flex-shrink:0;" />
                                <div style="flex-grow:1;" />
                            }
                        </div>
                        <a @onclick=NavigateToAllCourses style="margin-top:30px;margin-bottom:20px;">See all courses ></a>
                    }
                    else
                    {
                        <span style="text-align:center">Looks like you don't have any courses. <a @onclick=NavigateToAllCourses>Join some here!</a></span>
                    }
                </div>
            }
        }
    </Authorized>
    <NotAuthorized>
        Please Log In <a href="/Login">Here.</a>.
    </NotAuthorized>
</AuthorizeView>

@code{
    private bool loading = true;
    private User? currentUser;

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = await _contextFactory.CreateDbContextAsync();
        var authContext = await _authProvider.GetAuthenticationStateAsync();
        int ID = ClaimsHelper.getUserID(authContext);
        //This query selects the current User, then their most recently visited incomplete video, then their top 3 most recent courses (based on video visit timestamp)
        currentUser = dbContext.Users.Find(ID);
        if (currentUser is not null)
        {
            currentUser.UserxVideos = await dbContext.UserxVideos.Where(uv => !uv.VideoCompleted && uv.UserId == ID).OrderByDescending(uv => uv.LastVisited).Include(uv => uv.Video).Take(1).ToListAsync();
            currentUser.Courses = await dbContext.Courses.Where(course => course.UserxCourses.Any(uc => uc.UserId == ID)).OrderByDescending(course => dbContext.UDF_CourseMostRecentVisit(ID, course.CourseId)).ThenBy(course => course.CourseName).Take(3).ToListAsync();
        }
        loading = false;
        StateHasChanged();
    }

    protected void NavigateToVideo()
    {
        if (currentUser is not null && currentUser.UserxVideos.Count() > 0)
        {
            _navManager.NavigateTo(_navManager.BaseUri + "Videos/" + currentUser.UserxVideos.First().VideoId);
        }    
    }
    protected void NavigateToAllCourses()
    {
        _navManager.NavigateTo(_navManager.BaseUri + "MyCourses");       
    }
}