@using VideoShareData.DTOs
@implements IAsyncDisposable
@implements IDisposable
@inject NavigationManager _navManager
@inject IJSRuntime _jsRuntime
@*  See "wwwroot/js/Include_Iframe_API.js" for javascript invoked by the iframe component.
    I make no promises that it is well-written or safe code.
    I am not an experienced javascript programmer, but I did the best I could.
*@

<div id="dummy-div"></div>

@code {
    [Parameter]
    //Note: This is the 11-character Youtube Video ID, not the app's Video ID
    public string VideoID { get; set; }
    [Parameter]
    public int PlaybackTime { get; set; } = 0;
    [Parameter]
    public EventCallback OnVideoComplete { get; set; }
    [Parameter]
    public EventCallback<int>? PlaybackTimeChanged { get; set; }

    private int startTime;
    private DotNetObjectReference<YoutubeViewer> jsReference;
    private bool iFrameInitialized = false;
    private string currentVideoID = "";
    protected override void OnInitialized()
    {
        if (jsReference is null)
        {
            jsReference = DotNetObjectReference.Create(this);
        }
    }
    protected override void OnParametersSet()
    {
        if (VideoID != currentVideoID){
            currentVideoID = VideoID;
            startTime = PlaybackTime;
            if (iFrameInitialized)
            {
                _jsRuntime.InvokeVoidAsync("loadVideo", jsReference, VideoID, startTime);
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync("setupYouTubeIframe", jsReference, VideoID, startTime);
            iFrameInitialized = true;
        }
    }
    [JSInvokable]
    public Task UpdatePlaybackTime(int time)
    {
        if (time > PlaybackTime)
        {
            PlaybackTime = time;
            if (PlaybackTimeChanged is not null)
            {
                var PlaybackNonNull = (EventCallback<int>)PlaybackTimeChanged;
                return PlaybackNonNull.InvokeAsync(PlaybackTime);
            }
            else
            {
                return Task.CompletedTask;
            }
        }
        else return Task.CompletedTask;
    }
    [JSInvokable]
    public async Task CompleteVideoAsync()
    {
        await OnVideoComplete.InvokeAsync();
    }
    public void Dispose()
    {
        if (_jsRuntime is not null)
        {
            _jsRuntime.InvokeVoidAsync("cleanup", jsReference);
        }
        jsReference.Dispose();
    }
    public async ValueTask DisposeAsync()
    {
        if (_jsRuntime is not null)
        {
            await _jsRuntime.InvokeVoidAsync("cleanup", jsReference);
        }
        jsReference.Dispose();
    }
}
